{"version":3,"sources":["containers/Assets/drow.png","containers/Assets/tsunami.png","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","App","textAlign","AppLogo","height","AppHeader","backgroundColor","minHeight","display","flexDirection","alignItems","justifyContent","fontSize","color","AppBody1","AppBody2","AppBody3","AppLink","classes","className","src","require","alt","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,oGCIrCC,EAAYC,aAAW,SAAAC,GAAK,MAAG,CAEnCC,IAAK,CACHC,UAAW,UAGbC,QAAS,CACPC,OAAQ,UAGVC,UAAW,CACTC,gBAAiB,UACjBC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,SAAU,OACVC,MAAO,SAETC,SAAU,CACRR,gBAAiB,UACjBC,UAAW,QACXC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,eAAgB,OAChBC,SAAU,OACVC,MAAO,SAETE,SAAU,CACRT,gBAAiB,UACjBC,UAAW,QACXC,QAAS,OACTC,cAAe,cACfC,WAAY,SACZC,eAAgB,QAChBC,SAAU,OACVC,MAAO,SAETG,SAAU,CACRV,gBAAiB,UACjBC,UAAW,QACXC,QAAS,OACTC,cAAe,MACfC,WAAY,WACZC,eAAgB,SAChBC,SAAU,OACVC,MAAO,SAGTI,QAAS,CACPJ,MAAO,eAmCIZ,EA7BH,WACV,IAAMiB,EAAUpB,IAChB,OACE,yBAAKqB,UAAWD,EAAQjB,KACtB,kBAAC,IAAD,KACA,4BAAQkB,UAAWD,EAAQb,WACzB,8CAEF,yBAAKc,UAAWD,EAAQH,UACtB,yBAAKK,IAAKC,EAAQ,IAAuBC,IAAI,SAC7C,6BACE,iEAGJ,yBAAKH,UAAWD,EAAQF,UACtB,6BACE,kFAEA,sEAEF,uBAAGO,KAAK,yBAAyBC,OAAO,SACtC,yBAAKJ,IAAKC,EAAQ,IAA0BC,IAAI,oBCvEtCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bc2279a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drow.168cc7f4.png\";","module.exports = __webpack_public_path__ + \"static/media/tsunami.487856e5.png\";","import React from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme=>({\n\n  App: {\n    textAlign: 'center',\n  },\n  \n  AppLogo: {\n    height: '40vmin',\n  },\n  \n  AppHeader: {\n    backgroundColor: '#282c34',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: '2rem',\n    color: 'white',\n  },\n  AppBody1 :{\n    backgroundColor: '#282c34',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'left',\n    fontSize: '2rem',\n    color: 'white',\n  },\n  AppBody2: {\n    backgroundColor: '#ffffff',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    alignItems: 'center',\n    justifyContent: 'right',\n    fontSize: '2rem',\n    color: 'black',\n  },\n  AppBody3: {\n    backgroundColor: '#927346',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    fontSize: '2rem',\n    color: 'white',\n  },\n  \n  AppLink: {\n    color: '#09d3ac',\n  }\n  \n\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.App}>\n      <Router >\n      <header className={classes.AppHeader}>\n        <p>How To Demo.me</p>\n      </header>\n      <div className={classes.AppBody2}>\n        <img src={require(\"../Assets/drow.png\")} alt='drow' />\n        <div>\n          <p>Currently Demoing howdoiplay.com</p>\n        </div>\n      </div>\n      <div className={classes.AppBody3}>\n        <div>\n          <p>This content originally belongs to this guy here -></p>\n\n          <p>Click on Him to go see the original -></p>\n        </div>\n        <a href='https://howdoiplay.com' target='blank'>\n          <img src={require(\"../Assets/tsunami.png\")} alt='tsunami643' />\n        </a>\n      </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}